# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import TiraHostMessages_pb2 as TiraHostMessages__pb2


class TiraHostServiceStub(object):
    """The service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.test = channel.unary_unary(
                '/tira.generated.TiraHostService/test',
                request_serializer=TiraHostMessages__pb2.Input.SerializeToString,
                response_deserializer=TiraHostMessages__pb2.Output.FromString,
                )
        self.shell_command = channel.unary_unary(
                '/tira.generated.TiraHostService/shell_command',
                request_serializer=TiraHostMessages__pb2.Request.SerializeToString,
                response_deserializer=TiraHostMessages__pb2.Output.FromString,
                )
        self.vm_backup = channel.unary_unary(
                '/tira.generated.TiraHostService/vm_backup',
                request_serializer=TiraHostMessages__pb2.Request.SerializeToString,
                response_deserializer=TiraHostMessages__pb2.Response.FromString,
                )
        self.vm_create = channel.unary_unary(
                '/tira.generated.TiraHostService/vm_create',
                request_serializer=TiraHostMessages__pb2.Request.SerializeToString,
                response_deserializer=TiraHostMessages__pb2.Response.FromString,
                )
        self.vm_delete = channel.unary_unary(
                '/tira.generated.TiraHostService/vm_delete',
                request_serializer=TiraHostMessages__pb2.Request.SerializeToString,
                response_deserializer=TiraHostMessages__pb2.Response.FromString,
                )
        self.vm_info = channel.unary_unary(
                '/tira.generated.TiraHostService/vm_info',
                request_serializer=TiraHostMessages__pb2.Request.SerializeToString,
                response_deserializer=TiraHostMessages__pb2.Response.FromString,
                )
        self.vm_list = channel.unary_unary(
                '/tira.generated.TiraHostService/vm_list',
                request_serializer=TiraHostMessages__pb2.Request.SerializeToString,
                response_deserializer=TiraHostMessages__pb2.Response.FromString,
                )
        self.vm_sandbox = channel.unary_unary(
                '/tira.generated.TiraHostService/vm_sandbox',
                request_serializer=TiraHostMessages__pb2.Request.SerializeToString,
                response_deserializer=TiraHostMessages__pb2.Response.FromString,
                )
        self.vm_shutdown = channel.unary_unary(
                '/tira.generated.TiraHostService/vm_shutdown',
                request_serializer=TiraHostMessages__pb2.Request.SerializeToString,
                response_deserializer=TiraHostMessages__pb2.Response.FromString,
                )
        self.vm_snapshot = channel.unary_unary(
                '/tira.generated.TiraHostService/vm_snapshot',
                request_serializer=TiraHostMessages__pb2.Request.SerializeToString,
                response_deserializer=TiraHostMessages__pb2.Response.FromString,
                )
        self.vm_start = channel.unary_unary(
                '/tira.generated.TiraHostService/vm_start',
                request_serializer=TiraHostMessages__pb2.Request.SerializeToString,
                response_deserializer=TiraHostMessages__pb2.Response.FromString,
                )
        self.vm_stop = channel.unary_unary(
                '/tira.generated.TiraHostService/vm_stop',
                request_serializer=TiraHostMessages__pb2.Request.SerializeToString,
                response_deserializer=TiraHostMessages__pb2.Response.FromString,
                )
        self.vm_unsandbox = channel.unary_unary(
                '/tira.generated.TiraHostService/vm_unsandbox',
                request_serializer=TiraHostMessages__pb2.Request.SerializeToString,
                response_deserializer=TiraHostMessages__pb2.Response.FromString,
                )
        self.run_execute = channel.unary_unary(
                '/tira.generated.TiraHostService/run_execute',
                request_serializer=TiraHostMessages__pb2.Request.SerializeToString,
                response_deserializer=TiraHostMessages__pb2.Response.FromString,
                )


class TiraHostServiceServicer(object):
    """The service definition.
    """

    def test(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def shell_command(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def vm_backup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def vm_create(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def vm_delete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def vm_info(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def vm_list(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def vm_sandbox(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def vm_shutdown(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def vm_snapshot(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def vm_start(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def vm_stop(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def vm_unsandbox(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def run_execute(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TiraHostServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'test': grpc.unary_unary_rpc_method_handler(
                    servicer.test,
                    request_deserializer=TiraHostMessages__pb2.Input.FromString,
                    response_serializer=TiraHostMessages__pb2.Output.SerializeToString,
            ),
            'shell_command': grpc.unary_unary_rpc_method_handler(
                    servicer.shell_command,
                    request_deserializer=TiraHostMessages__pb2.Request.FromString,
                    response_serializer=TiraHostMessages__pb2.Output.SerializeToString,
            ),
            'vm_backup': grpc.unary_unary_rpc_method_handler(
                    servicer.vm_backup,
                    request_deserializer=TiraHostMessages__pb2.Request.FromString,
                    response_serializer=TiraHostMessages__pb2.Response.SerializeToString,
            ),
            'vm_create': grpc.unary_unary_rpc_method_handler(
                    servicer.vm_create,
                    request_deserializer=TiraHostMessages__pb2.Request.FromString,
                    response_serializer=TiraHostMessages__pb2.Response.SerializeToString,
            ),
            'vm_delete': grpc.unary_unary_rpc_method_handler(
                    servicer.vm_delete,
                    request_deserializer=TiraHostMessages__pb2.Request.FromString,
                    response_serializer=TiraHostMessages__pb2.Response.SerializeToString,
            ),
            'vm_info': grpc.unary_unary_rpc_method_handler(
                    servicer.vm_info,
                    request_deserializer=TiraHostMessages__pb2.Request.FromString,
                    response_serializer=TiraHostMessages__pb2.Response.SerializeToString,
            ),
            'vm_list': grpc.unary_unary_rpc_method_handler(
                    servicer.vm_list,
                    request_deserializer=TiraHostMessages__pb2.Request.FromString,
                    response_serializer=TiraHostMessages__pb2.Response.SerializeToString,
            ),
            'vm_sandbox': grpc.unary_unary_rpc_method_handler(
                    servicer.vm_sandbox,
                    request_deserializer=TiraHostMessages__pb2.Request.FromString,
                    response_serializer=TiraHostMessages__pb2.Response.SerializeToString,
            ),
            'vm_shutdown': grpc.unary_unary_rpc_method_handler(
                    servicer.vm_shutdown,
                    request_deserializer=TiraHostMessages__pb2.Request.FromString,
                    response_serializer=TiraHostMessages__pb2.Response.SerializeToString,
            ),
            'vm_snapshot': grpc.unary_unary_rpc_method_handler(
                    servicer.vm_snapshot,
                    request_deserializer=TiraHostMessages__pb2.Request.FromString,
                    response_serializer=TiraHostMessages__pb2.Response.SerializeToString,
            ),
            'vm_start': grpc.unary_unary_rpc_method_handler(
                    servicer.vm_start,
                    request_deserializer=TiraHostMessages__pb2.Request.FromString,
                    response_serializer=TiraHostMessages__pb2.Response.SerializeToString,
            ),
            'vm_stop': grpc.unary_unary_rpc_method_handler(
                    servicer.vm_stop,
                    request_deserializer=TiraHostMessages__pb2.Request.FromString,
                    response_serializer=TiraHostMessages__pb2.Response.SerializeToString,
            ),
            'vm_unsandbox': grpc.unary_unary_rpc_method_handler(
                    servicer.vm_unsandbox,
                    request_deserializer=TiraHostMessages__pb2.Request.FromString,
                    response_serializer=TiraHostMessages__pb2.Response.SerializeToString,
            ),
            'run_execute': grpc.unary_unary_rpc_method_handler(
                    servicer.run_execute,
                    request_deserializer=TiraHostMessages__pb2.Request.FromString,
                    response_serializer=TiraHostMessages__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'tira.generated.TiraHostService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TiraHostService(object):
    """The service definition.
    """

    @staticmethod
    def test(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tira.generated.TiraHostService/test',
            TiraHostMessages__pb2.Input.SerializeToString,
            TiraHostMessages__pb2.Output.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def shell_command(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tira.generated.TiraHostService/shell_command',
            TiraHostMessages__pb2.Request.SerializeToString,
            TiraHostMessages__pb2.Output.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def vm_backup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tira.generated.TiraHostService/vm_backup',
            TiraHostMessages__pb2.Request.SerializeToString,
            TiraHostMessages__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def vm_create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tira.generated.TiraHostService/vm_create',
            TiraHostMessages__pb2.Request.SerializeToString,
            TiraHostMessages__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def vm_delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tira.generated.TiraHostService/vm_delete',
            TiraHostMessages__pb2.Request.SerializeToString,
            TiraHostMessages__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def vm_info(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tira.generated.TiraHostService/vm_info',
            TiraHostMessages__pb2.Request.SerializeToString,
            TiraHostMessages__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def vm_list(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tira.generated.TiraHostService/vm_list',
            TiraHostMessages__pb2.Request.SerializeToString,
            TiraHostMessages__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def vm_sandbox(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tira.generated.TiraHostService/vm_sandbox',
            TiraHostMessages__pb2.Request.SerializeToString,
            TiraHostMessages__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def vm_shutdown(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tira.generated.TiraHostService/vm_shutdown',
            TiraHostMessages__pb2.Request.SerializeToString,
            TiraHostMessages__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def vm_snapshot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tira.generated.TiraHostService/vm_snapshot',
            TiraHostMessages__pb2.Request.SerializeToString,
            TiraHostMessages__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def vm_start(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tira.generated.TiraHostService/vm_start',
            TiraHostMessages__pb2.Request.SerializeToString,
            TiraHostMessages__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def vm_stop(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tira.generated.TiraHostService/vm_stop',
            TiraHostMessages__pb2.Request.SerializeToString,
            TiraHostMessages__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def vm_unsandbox(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tira.generated.TiraHostService/vm_unsandbox',
            TiraHostMessages__pb2.Request.SerializeToString,
            TiraHostMessages__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def run_execute(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tira.generated.TiraHostService/run_execute',
            TiraHostMessages__pb2.Request.SerializeToString,
            TiraHostMessages__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
