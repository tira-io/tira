# Generated by Django 5.0.9 on 2024-09-24 01:11

import django.db.models.deletion
from django.db import migrations, models

import tira_app.model


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='VirtualMachine',
            fields=[
                ('vm_id', models.CharField(max_length=280, primary_key=True, serialize=False)),
                ('user_password', models.CharField(default='tira', max_length=280)),
                ('roles', models.CharField(default='guest', max_length=100)),
                ('host', models.CharField(default=None, max_length=100, null=True)),
                ('admin_name', models.CharField(default=None, max_length=100, null=True)),
                ('admin_pw', models.CharField(default=None, max_length=280, null=True)),
                ('ip', models.CharField(default=None, max_length=30, null=True)),
                ('ssh', models.IntegerField(default=None, null=True)),
                ('rdp', models.IntegerField(default=None, null=True)),
                ('archived', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Evaluator',
            fields=[
                ('evaluator_id', models.CharField(max_length=150, primary_key=True, serialize=False)),
                ('command', models.CharField(default='', max_length=280)),
                ('working_directory', models.CharField(default='', max_length=150)),
                ('measures', models.CharField(default='', max_length=150)),
                ('is_deprecated', models.BooleanField(default=False)),
                ('is_git_runner', models.BooleanField(default=False)),
                ('git_runner_image', models.CharField(default=None, max_length=500, null=True)),
                ('git_runner_command', models.CharField(default=None, max_length=500, null=True)),
                ('git_repository_id', models.CharField(default=None, max_length=200, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='GitIntegration',
            fields=[
                ('namespace_url', models.CharField(max_length=280, primary_key=True, serialize=False)),
                ('host', models.CharField(default='', max_length=100)),
                ('private_token', models.CharField(default='', max_length=100)),
                ('user_name', models.CharField(default='', max_length=100)),
                ('user_password', models.CharField(default='', max_length=100)),
                ('gitlab_repository_namespace_id', models.IntegerField(default=None, null=True)),
                ('image_registry_prefix', models.CharField(default='', max_length=150)),
                ('user_repository_branch', models.CharField(default='main', max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='TransactionLog',
            fields=[
                ('transaction_id', models.CharField(max_length=280, primary_key=True, serialize=False)),
                ('completed', models.BooleanField()),
                ('last_update', models.DateTimeField(auto_now=True)),
                ('last_status', models.CharField(max_length=50)),
                ('last_message', models.CharField(max_length=500)),
            ],
        ),
        migrations.CreateModel(
            name='DiscourseTokenForUser',
            fields=[
                ('vm_id', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='tira.virtualmachine')),
                ('token', models.CharField(max_length=250)),
            ],
        ),
        migrations.CreateModel(
            name='DockerSoftware',
            fields=[
                ('docker_software_id', models.AutoField(primary_key=True, serialize=False)),
                ('command', models.TextField(default='')),
                ('display_name', models.TextField(default='')),
                ('user_image_name', models.TextField(default='')),
                ('tira_image_name', models.TextField(default='')),
                ('tira_image_workdir', models.TextField(default=None, null=True)),
                ('deleted', models.BooleanField(default=False)),
                ('description', models.TextField(default='')),
                ('paper_link', models.TextField(default='')),
                ('ir_re_ranker', models.BooleanField(default=False)),
                ('ir_re_ranking_input', models.BooleanField(default=False)),
                ('public_image_name', models.TextField(default=None, null=True)),
                ('public_image_size', models.BigIntegerField(default=None, null=True)),
                ('input_docker_software', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.RESTRICT, to='tira.dockersoftware')),
                ('vm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tira.virtualmachine')),
            ],
        ),
        migrations.CreateModel(
            name='Dataset',
            fields=[
                ('dataset_id', models.CharField(max_length=150, primary_key=True, serialize=False)),
                ('display_name', models.CharField(default='', max_length=150)),
                ('is_confidential', models.BooleanField(default=True)),
                ('is_deprecated', models.BooleanField(default=False)),
                ('data_server', models.CharField(default=None, max_length=150, null=True)),
                ('released', models.CharField(default='', max_length=30)),
                ('default_upload_name', models.CharField(default='predictions.ndjson', max_length=50)),
                ('created', models.DateField(auto_now_add=True)),
                ('last_modified', models.DateField(auto_now=True)),
                ('irds_docker_image', models.CharField(default=None, max_length=150, null=True)),
                ('irds_import_command', models.CharField(default=None, max_length=150, null=True)),
                ('irds_import_truth_command', models.CharField(default=None, max_length=150, null=True)),
                ('meta_dataset_of', models.TextField(default=None, null=True)),
                ('evaluator', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='tira.evaluator')),
            ],
        ),
        migrations.CreateModel(
            name='HuggingFaceModelsOfSoftware',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hf_home', models.CharField(default='', max_length=250)),
                ('mount_hf_model', models.TextField(default='')),
                ('models_scan', models.TextField(default='')),
                ('docker_software', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='tira.dockersoftware')),
            ],
        ),
        migrations.CreateModel(
            name='Organizer',
            fields=[
                ('organizer_id', models.CharField(max_length=280, primary_key=True, serialize=False)),
                ('name', models.CharField(default='tira', max_length=100)),
                ('years', models.CharField(default='2022', max_length=30)),
                ('web', models.CharField(default='https://www.tira.io', max_length=300)),
                ('git_integrations', models.ManyToManyField(default=None, to='tira.gitintegration')),
            ],
        ),
        migrations.CreateModel(
            name='Run',
            fields=[
                ('run_id', models.CharField(max_length=150, primary_key=True, serialize=False)),
                ('downloadable', models.BooleanField(default=False)),
                ('deleted', models.BooleanField(default=False)),
                ('access_token', models.CharField(default='', max_length=150)),
                ('docker_software', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='tira.dockersoftware')),
                ('evaluator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='tira.evaluator')),
                ('input_dataset', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='tira.dataset')),
                ('input_run', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='tira.run')),
            ],
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reviewer_id', models.CharField(max_length=150)),
                ('review_date', models.CharField(max_length=150)),
                ('no_errors', models.BooleanField(default=True)),
                ('missing_output', models.BooleanField(default=False)),
                ('extraneous_output', models.BooleanField(default=False)),
                ('invalid_output', models.BooleanField(default=False)),
                ('has_error_output', models.BooleanField(default=False)),
                ('other_errors', models.BooleanField(default=False)),
                ('comment', models.TextField(default='')),
                ('has_errors', models.BooleanField(default=False)),
                ('has_warnings', models.BooleanField(default=False)),
                ('has_no_errors', models.BooleanField(default=False)),
                ('published', models.BooleanField(default=False)),
                ('blinded', models.BooleanField(default=True)),
                ('run', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='tira.run')),
            ],
        ),
        migrations.CreateModel(
            name='Evaluation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('measure_key', models.CharField(max_length=150)),
                ('measure_value', models.CharField(max_length=150)),
                ('evaluator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='tira.evaluator')),
                ('run', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tira.run')),
            ],
        ),
        migrations.CreateModel(
            name='Software',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('software_id', models.CharField(max_length=150)),
                ('count', models.CharField(max_length=150)),
                ('command', models.TextField(default='')),
                ('working_directory', models.TextField(default='')),
                ('creation_date', models.CharField(max_length=150)),
                ('last_edit_date', models.CharField(max_length=150)),
                ('deleted', models.BooleanField(default=False)),
                ('dataset', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='tira.dataset')),
                ('vm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tira.virtualmachine')),
            ],
        ),
        migrations.AddField(
            model_name='run',
            name='software',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='tira.software'),
        ),
        migrations.CreateModel(
            name='SoftwareHasInputRun',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('input_run', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='tira.run')),
                ('software', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='tira.software')),
            ],
        ),
        migrations.CreateModel(
            name='SoftwareSubmissionGitRepository',
            fields=[
                ('repository_url', models.CharField(max_length=500, primary_key=True, serialize=False)),
                ('reference_repository_url', models.CharField(max_length=500)),
                ('external_owner', models.CharField(max_length=100)),
                ('docker_registry_token', models.CharField(max_length=100)),
                ('docker_registry_user', models.CharField(default=None, max_length=100)),
                ('tira_client_token', models.CharField(max_length=100)),
                ('tira_client_user', models.CharField(default=None, max_length=100, null=True)),
                ('tira_client_description', models.CharField(default=None, max_length=100, null=True)),
                ('confirmed', models.BooleanField(default=False)),
                ('vm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tira.virtualmachine')),
            ],
        ),
        migrations.CreateModel(
            name='LinkToSoftwareSubmissionGitRepository',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('commit_hash', models.CharField(max_length=100)),
                ('link_to_file', models.CharField(max_length=500)),
                ('build_environment', models.TextField(default=None, null=True)),
                ('docker_software', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tira.dockersoftware')),
                ('software_submission_git_repository', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='tira.softwaresubmissiongitrepository')),
            ],
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('task_id', models.CharField(max_length=150, primary_key=True, serialize=False)),
                ('task_name', models.CharField(default='', max_length=150)),
                ('task_description', models.TextField(default='')),
                ('web', models.CharField(default='', max_length=150)),
                ('featured', models.BooleanField(default=False)),
                ('require_registration', models.BooleanField(default=False)),
                ('require_groups', models.BooleanField(default=False)),
                ('restrict_groups', models.BooleanField(default=False)),
                ('max_std_out_chars_on_test_data', models.IntegerField(default=0)),
                ('max_std_err_chars_on_test_data', models.IntegerField(default=0)),
                ('max_file_list_chars_on_test_data', models.IntegerField(default=0)),
                ('command_placeholder', models.TextField(default='mySoftware -c $inputDataset -r $inputRun -o $outputDir')),
                ('command_description', models.TextField(default='Available variables: <code>$inputDataset</code>, <code>$inputRun</code>, <code>$outputDir</code>, <code>$dataServer</code>, and <code>$token</code>.')),
                ('allowed_task_teams', models.TextField(default='')),
                ('dataset_label', models.CharField(default='Input dataset', max_length=280)),
                ('max_std_out_chars_on_test_data_eval', models.IntegerField(default=0)),
                ('max_std_err_chars_on_test_data_eval', models.IntegerField(default=0)),
                ('max_file_list_chars_on_test_data_eval', models.IntegerField(default=0)),
                ('is_ir_task', models.BooleanField(default=False)),
                ('irds_re_ranking_image', models.CharField(default='', max_length=150)),
                ('irds_re_ranking_command', models.CharField(default='', max_length=150)),
                ('irds_re_ranking_resource', models.CharField(default='', max_length=150)),
                ('organizer', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='tira.organizer')),
                ('vm', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='tira.virtualmachine')),
            ],
        ),
        migrations.AddField(
            model_name='software',
            name='task',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='tira.task'),
        ),
        migrations.AddField(
            model_name='run',
            name='task',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='tira.task'),
        ),
        migrations.CreateModel(
            name='Registration',
            fields=[
                ('team_name', models.CharField(default=None, max_length=50, primary_key=True, serialize=False)),
                ('initial_owner', models.CharField(default=None, max_length=50)),
                ('team_members', models.CharField(default=None, max_length=500, null=True)),
                ('name', models.CharField(default=None, max_length=150, null=True)),
                ('email', models.CharField(default=None, max_length=150, null=True)),
                ('affiliation', models.CharField(default=None, max_length=150, null=True)),
                ('country', models.CharField(default=None, max_length=150, null=True)),
                ('employment', models.CharField(default=None, max_length=150, null=True)),
                ('participates_for', models.CharField(default=None, max_length=150, null=True)),
                ('instructor_name', models.CharField(default=None, max_length=150, null=True)),
                ('instructor_email', models.CharField(default=None, max_length=150, null=True)),
                ('questions', models.CharField(default=None, max_length=500, null=True)),
                ('created', models.DateField(auto_now_add=True)),
                ('last_modified', models.DateField(auto_now=True)),
                ('registered_on_task', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.RESTRICT, to='tira.task')),
            ],
        ),
        migrations.AddField(
            model_name='dockersoftware',
            name='task',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='tira.task'),
        ),
        migrations.AddField(
            model_name='dataset',
            name='default_task',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='tira.task'),
        ),
        migrations.CreateModel(
            name='BackendProcess',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.TextField(default='')),
                ('cmd', models.TextField(default='')),
                ('last_contact', models.TextField(default='')),
                ('exit_code', models.IntegerField(default=None, null=True)),
                ('stdout', models.TextField(default='')),
                ('vm', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='tira.virtualmachine')),
                ('task', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='tira.task')),
            ],
        ),
        migrations.CreateModel(
            name='TransitionLog',
            fields=[
                ('vm_id', models.CharField(max_length=280, primary_key=True, serialize=False)),
                ('vm_state', models.IntegerField(validators=[tira_app.model._validate_transition_state])),
                ('last_update', models.DateTimeField(auto_now=True)),
                ('transaction', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='tira.transactionlog')),
            ],
        ),
        migrations.CreateModel(
            name='Upload',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_edit_date', models.CharField(max_length=150)),
                ('display_name', models.TextField(default='default upload')),
                ('description', models.TextField(default='description missing')),
                ('paper_link', models.TextField(default='')),
                ('deleted', models.BooleanField(default=False)),
                ('rename_to', models.TextField(default=None, null=True)),
                ('dataset', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='tira.dataset')),
                ('task', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='tira.task')),
                ('vm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tira.virtualmachine')),
            ],
        ),
        migrations.CreateModel(
            name='SoftwareClone',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('docker_software', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='tira.dockersoftware')),
                ('vm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tira.virtualmachine')),
                ('task', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='tira.task')),
                ('upload', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='tira.upload')),
            ],
        ),
        migrations.AddField(
            model_name='run',
            name='upload',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='tira.upload'),
        ),
        migrations.CreateModel(
            name='DockerSoftwareHasAdditionalInput',
            fields=[
                ('position', models.AutoField(primary_key=True, serialize=False)),
                ('docker_software', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='tira.dockersoftware')),
                ('input_docker_software', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='tira.dockersoftware')),
                ('input_upload', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.RESTRICT, to='tira.upload')),
            ],
        ),
        migrations.AddField(
            model_name='dockersoftware',
            name='input_upload',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.RESTRICT, to='tira.upload'),
        ),
        migrations.CreateModel(
            name='VirtualMachineHasEvaluator',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('evaluator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tira.evaluator')),
                ('vm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tira.virtualmachine')),
            ],
        ),
        migrations.AlterUniqueTogether(
            name='software',
            unique_together={('software_id', 'vm', 'task')},
        ),
        migrations.CreateModel(
            name='AllowedServer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('server_address', models.CharField(max_length=280)),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tira.task')),
            ],
            options={
                'unique_together': {('task', 'server_address')},
            },
        ),
        migrations.CreateModel(
            name='TaskHasDataset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_test', models.BooleanField(default=True)),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tira.dataset')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tira.task')),
            ],
            options={
                'unique_together': {('task_id', 'dataset_id')},
            },
        ),
        migrations.CreateModel(
            name='EvaluationLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vm_id', models.CharField(max_length=280)),
                ('run_id', models.CharField(max_length=280)),
                ('running_on', models.CharField(max_length=280)),
                ('last_update', models.DateTimeField(auto_now=True)),
                ('transaction', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='tira.transactionlog')),
            ],
            options={
                'unique_together': {('vm_id', 'run_id')},
            },
        ),
    ]
