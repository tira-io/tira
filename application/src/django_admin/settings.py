"""
Django settings for django_admin project.

Generated by 'django-admin startproject' using Django 3.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

import importlib.resources as resources
import logging
import os
from pathlib import Path

import yaml
from pyaml_env import parse_config

from tira_app.util import str2bool

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

custom_settings = {}
cfgpath = os.environ.get("TIRA_CONFIG", str(BASE_DIR / "config" / "tira-application-config.yml"))
logging.info(f"Load settings from {cfgpath}.")
config = parse_config(cfgpath, default_value=None, loader=yaml.FullLoader)
custom_settings.update(config)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = str2bool(custom_settings["debug"])

if DEBUG:
    logging.basicConfig(level=logging.DEBUG, force=True)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# https://docs.djangoproject.com/en/5.1/ref/settings/#std-setting-SECRET_KEY
SECRET_KEY = custom_settings["django_secret"]


ALLOWED_HOSTS = custom_settings["allowed_hosts"]

TIRA_ROOT = Path(custom_settings["tira_root"])
if not TIRA_ROOT.is_dir():
    logging.warning(f"{TIRA_ROOT} does not exists and will be created now.")

(TIRA_ROOT / "state").mkdir(parents=True, exist_ok=True)

HOST_GRPC_PORT = custom_settings.get("host_grpc_port", "50051")
APPLICATION_GRPC_PORT = custom_settings.get("application_grpc_port", "50052")
GRPC_HOST = custom_settings.get("grpc_host", "local")  # can be local or remote
TIRA_DB_NAME = (
    Path(TIRA_ROOT / "state") / f"{custom_settings['database']['name']}.sqlite3"
    if custom_settings["database"]["engine"] == "django.db.backends.sqlite3"
    else custom_settings["database"]["name"]
)
TIRA_DB = {
    "ENGINE": custom_settings["database"]["engine"],
    "NAME": TIRA_DB_NAME,
    "USER": custom_settings["database"]["user"],
    "PASSWORD": custom_settings["database"]["password"],
    "HOST": custom_settings["database"]["host"],
    "PORT": int(custom_settings["database"]["port"]),
    "TEST": {
        "NAME": "test_tira",
        "ENGINE": "django.db.backends.sqlite3",
    },
}
# Application definition

INSTALLED_APPS = [
    "tira_app.apps.TiraConfig",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django_filters",
    "rest_framework",
    "rest_framework_json_api",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": ("tira_app.authentication.TrustedHeaderAuthentication",),
    "DEFAULT_FILTER_BACKENDS": ("rest_framework_json_api.django_filters.DjangoFilterBackend",),
    "DEFAULT_RENDERER_CLASSES": ("rest_framework.renderers.JSONRenderer",),
}

ROOT_URLCONF = "django_admin.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "django_admin.wsgi.application"

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {"default": TIRA_DB}

SESSION_ENGINE = "django.contrib.sessions.backends.cached_db"
DEFAULT_AUTO_FIELD = "django.db.models.AutoField"


def logger_config(log_dir: Path):
    return {
        "version": 1,
        "disable_existing_loggers": False,
        "formatters": {
            "verbose": {
                "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
                "style": "{",
            },
            "default": {
                "format": "{levelname} {asctime} {module}: {message}",
                "style": "{",
            },
            "simple": {
                "format": "{levelname} {message}",
                "style": "{",
            },
        },
        "filters": {
            "require_debug_true": {
                "()": "django.utils.log.RequireDebugTrue",
            },
        },
        "handlers": {
            "console": {
                "level": "DEBUG",
                "filters": ["require_debug_true"],
                "class": "logging.StreamHandler",
                "formatter": "default",
            },
            "ceph_django_debug": {
                "level": "DEBUG",
                "class": "logging.FileHandler",
                "filters": ["require_debug_true"],
                "filename": log_dir / "django-debug.log",
                "formatter": "default",
            },
            "ceph_django_info": {
                "level": "INFO",
                "class": "logging.FileHandler",
                "filename": log_dir / "django-info.log",
                "formatter": "default",
            },
            "ceph_django_warn": {
                "level": "WARNING",
                "class": "logging.FileHandler",
                "filename": log_dir / "django-warning.log",
                "formatter": "default",
            },
            "ceph_tira_debug": {
                "level": "DEBUG",
                "class": "logging.FileHandler",
                "filters": ["require_debug_true"],
                "filename": log_dir / "tira-debug.log",
                "formatter": "default",
            },
            "ceph_tira_info": {
                "level": "INFO",
                "class": "logging.FileHandler",
                "filename": log_dir / "tira-info.log",
                "formatter": "default",
            },
            "ceph_tira_warn": {
                "level": "WARNING",
                "class": "logging.FileHandler",
                "filename": log_dir / "tira-warning.log",
                "formatter": "default",
            },
            "ceph_tira_db": {
                "level": "INFO",
                "class": "logging.FileHandler",
                "filename": log_dir / "tira-db.log",
                "formatter": "default",
            },
            "ceph_grpc_debug": {
                "level": "DEBUG",
                "class": "logging.FileHandler",
                "filters": ["require_debug_true"],
                "filename": log_dir / "grpc-debug.log",
                "formatter": "default",
            },
            "ceph_grpc_info": {
                "level": "INFO",
                "class": "logging.FileHandler",
                "filename": log_dir / "grpc-info.log",
                "formatter": "default",
            },
            "ceph_grpc_warn": {
                "level": "WARNING",
                "class": "logging.FileHandler",
                "filename": log_dir / "grpc-warning.log",
                "formatter": "default",
            },
        },
        "loggers": {
            "django": {
                "handlers": ["console", "ceph_django_debug", "ceph_django_warn", "ceph_django_info"],
                "propagate": True,
            },
            "django.requests": {
                "handlers": ["console", "ceph_django_debug", "ceph_django_warn", "ceph_django_info"],
                "propagate": True,
            },
            "django.server": {
                "handlers": ["console", "ceph_django_debug", "ceph_django_warn", "ceph_django_info"],
                "propagate": True,
            },
            "tira": {
                "handlers": ["console", "ceph_tira_debug", "ceph_tira_warn", "ceph_tira_info"],
                "propagate": True,
            },
            "tira_db": {
                "handlers": ["console", "ceph_tira_db"],
                "propagate": True,
            },
            "grpc_server": {
                "handlers": ["console", "ceph_grpc_debug", "ceph_grpc_warn", "ceph_grpc_info"],
                "propagate": True,
            },
        },
    }


# Git Integration
GIT_CI_AVAILABLE_RESOURCES = {
    "small-resources": {
        "cores": 1,
        "ram": 10,
        "gpu": 0,
        "data": "no",
        "description": "Small (1 CPU Cores, 10GB of RAM)",
        "key": "small-resources",
    },
    "medium-resources": {
        "cores": 2,
        "ram": 20,
        "gpu": 0,
        "data": "no",
        "description": "Medium (2 CPU Cores, 20GB of RAM)",
        "key": "medium-resources",
    },
    "large-resources": {
        "cores": 4,
        "ram": 40,
        "gpu": 0,
        "data": "no",
        "description": "Large (4 CPU Cores, 40GB of RAM)",
        "key": "large-resources",
    },
    "small-resources-gpu": {
        "cores": 1,
        "ram": 10,
        "gpu": "1-nvidia-1080",
        "data": "no",
        "description": "Small w. GPU (1 CPU Cores, 10GB of RAM, 1 Nvidia GTX 1080 with 8GB)",
        "key": "small-resources-gpu",
    },
    "medium-resources-gpu": {
        "cores": 2,
        "ram": 20,
        "gpu": "1-nvidia-1080",
        "data": "no",
        "description": "Medium w. GPU (2 CPU Cores, 20GB of RAM, 1 Nvidia GTX 1080 with 8GB)",
        "key": "medium-resources-gpu",
    },
    "large-resources-gpu": {
        "cores": 4,
        "ram": 40,
        "gpu": "1-nvidia-1080",
        "data": "no",
        "description": "Large w. GPU (4 CPU Cores, 40GB of RAM, 1 Nvidia GTX 1080 with 8GB)",
        "key": "large-resources-gpu",
    },
    "xl-resources-gpu": {
        "cores": 8,
        "ram": 80,
        "gpu": "1-nvidia-1080",
        "data": "no",
        "description": "XL w. GPU (8 CPU Cores, 80GB of RAM, 1 Nvidia GTX 1080 with 8GB)",
        "key": "xl-resources-gpu",
    },
    "a100-resources-gpu": {
        "cores": 5,
        "ram": 50,
        "gpu": "1-nvidia-a100",
        "data": "no",
        "description": "A100 GPU (5 CPU Cores, 50GB of RAM, 1 Nvidia A100 with 40GB)",
        "key": "a100-resources-gpu",
    },
}

DEFAULT_GIT_INTEGRATION_URL = "https://git.webis.de/code-research/tira"

IR_MEASURES_IMAGE = custom_settings.get("IR_MEASURES_IMAGE", "webis/tira-ir-measures-evaluator:0.0.1")
IR_MEASURES_COMMAND = custom_settings.get(
    "IR_MEASURES_COMMAND",
    "/ir_measures_evaluator.py --run ${inputRun}/run.txt --topics ${inputDataset}/queries.jsonl --qrels"
    ' ${inputDataset}/qrels.txt --output ${outputDir} --measures "P@10" "nDCG@10" "MRR"',
)

GITHUB_TOKEN = custom_settings["github_token"]

# Caching
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.db.DatabaseCache",
        "LOCATION": "tira_database_cache_table",
        "TIMEOUT": 43200,  # 43200 seconds (i.e.,12 hours) as timeout, to use for the cache
        "OPTIONS": {"MAX_ENTRIES": 100000},
    }
}

TIREX_COMPONENTS = yaml.load(
    (resources.files("tira_app.res") / "tirex-components.yml").read_bytes(), Loader=yaml.FullLoader
)

# Logging
ld = Path(custom_settings.get("logging_dir", TIRA_ROOT / "log" / "tira-application"))
try:
    ld.mkdir(parents=True, exist_ok=True)
except PermissionError as e:
    print(f"failed to create logging path {ld}: ", e)
if os.access(ld, os.W_OK):
    LOGGING = logger_config(ld)
else:
    print(f"failed to initialize logging in {ld}")
    if DEBUG:
        print(f"Logging to {BASE_DIR}")
        LOGGING = logger_config(Path(BASE_DIR))
    else:
        raise PermissionError(f"Can not write to {ld} in production mode.")


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Europe/Berlin"

USE_I18N = True

USE_L10N = True

USE_TZ = True

DISCOURSE_API_URL = custom_settings["discourse_api_url"]
DISRAPTOR_API_KEY = custom_settings["discourse_api_key"]
PUBLIC_TRAINING_DATA = set(
    ["jena-topics-20231026-test", "leipzig-topics-20231025-test", "subsampled-ms-marco-ir-lab-20250105-test"]
)

CODE_SUBMISSION_REFERENCE_REPOSITORIES = {
    "ir-lab-jena-leipzig-wise-2023": "tira-io/tira-ir-lab-wise-submission-template",
    "ir-lab-sose-2024": "webis-de/information-retrieval-exercise",
    "ir-benchmarks": "tira-io/tira-ir-lab-wise-submission-template",
    "webpage-classification": "OpenWebSearch/irixys23-tira-submission-template",
    "valueeval-2024-human-value-detection": "touche-webis-de/valueeval24-tira-software-submission-template",
    "workshop-on-open-web-search": "tira-io/wows24-submission-template",
    "nlpbuw-fsu-sose-24": "webis-de/natural-language-processing-exercises",
}

REFERENCE_DATASETS = {
    "ir-lab-padua-2024": "ir-lab-padua-2024/spot-check-20240424-training",
    "ir-benchmarks": "ir-benchmarks/cranfield-20230107-training",
    "workshop-on-open-web-search": "workshop-on-open-web-search/retrieval-20231027-training",
    "generative-ai-authorship-verification-panclef-2024": (
        "generative-ai-authorship-verification-panclef-2024/pan24-generative-authorship-tiny-smoke-20240417-training"
    ),
}

WELL_KNOWN = {
    "api": custom_settings["tira_rest_api"]["base_url"],
    "grpc": custom_settings["tira_rest_api"]["grpc_url"],
    "archived": custom_settings["tira_rest_api"]["archived_url"],
    "login": custom_settings["tira_rest_api"]["login_url"],
    "logout": custom_settings["tira_rest_api"]["logout_url"],
    "notifications": custom_settings["tira_rest_api"]["notifications_url"],
    "disraptorURL": custom_settings["tira_rest_api"]["disraptor_url"],
}

CODE_SUBMISSION_REPOSITORY_NAMESPACE = "tira-io"
CSRF_TRUSTED_ORIGINS = ["https://127.0.0.1:8082", "https://127.0.0.1:8080", "https://127.0.0.1:8081"]
