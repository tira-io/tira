openapi: '3.0.2'
info:
  title: TIRA API
  version: "1.0.0-draft"
servers:
  - url: https://www.tira.io/api
  # - url: https://api.tira.io/ <-- maybe for the future?
security:
  - bearerAuth: []

paths:
  # Legacy API
  /tira-admin/reload/vms:
    post:
      servers:
        - url: https://www.tira.io
      security:
        - LegacyApiKeyAuth: []
      responses:
        '200':
          description: TODO
      tags: [legacy, dead?]
  /tira-admin/reload/datasets:
    post:
      servers:
        - url: https://www.tira.io
      security:
        - LegacyApiKeyAuth: []
      responses:
        '200':
          description: TODO
      tags: [legacy, dead?]
  /tira-admin/reload/tasks:
    post:
      servers:
        - url: https://www.tira.io
      security:
        - LegacyApiKeyAuth: []
      responses:
        '200':
          description: TODO
      tags: [legacy, dead?]
  /tira-admin/reload-data:
    post:
      servers:
        - url: https://www.tira.io
      security:
        - LegacyApiKeyAuth: []
      responses:
        '200':
          description: TODO
      tags: [legacy, dead?]
  /tira-admin/reload-runs/{vmId}:
    post:
      servers:
        - url: https://www.tira.io
      security:
        - LegacyApiKeyAuth: []
      responses:
        '200':
          description: TODO
      tags: [legacy, dead?]
  /tira-admin/create-vm:
    post:
      servers:
        - url: https://www.tira.io
      description: Hook for create_vm posts. Responds with json objects indicating the state of the create process.
      security:
        - LegacyApiKeyAuth: []
      responses:
        '200':
          description: TODO
      tags: [legacy, dead?]
  /tira-admin/archive-vm:
    post:
      servers:
        - url: https://www.tira.io
      summary: Deprecated, may be deleted without replacement?
      description: TODO
      deprecated: true
      security:
        - LegacyApiKeyAuth: []
      responses:
        '200':
          description: TODO
      tags: [legacy, dead?]
  /tira-admin/modify-vm:
    post:
      servers:
        - url: https://www.tira.io
      description: TODO
      security:
        - LegacyApiKeyAuth: []
      responses:
        '200':
          description: TODO
      tags: [legacy, dead?]
  /tira-admin/export-participants/{taskId}.csv:
    get:
      servers:
        - url: https://www.tira.io
      summary: Deprecated, use `/v1/tasks/{taskId}/registrations` instead with MIME-type text/csv
      description: TODO
      deprecated: true
      security:
        - LegacyApiKeyAuth: []
      responses:
        '200':
          description: TODO
      tags: [legacy]
  /tira-admin/{organizerId}/create-task:
    post:
      servers:
        - url: https://www.tira.io
      summary: Deprecated, use a POST to `/v1/tasks` instead
      description: TODO
      deprecated: true
      security:
        - LegacyApiKeyAuth: []
      responses:
        '200':
          description: TODO
      tags: [legacy]
  /tira-admin/edit-task/{taskId}:
    post:
      servers:
        - url: https://www.tira.io
      summary: Deprecated, use a PATCH to `/v1/tasks/{taskId}` instead
      description: TODO
      deprecated: true
      security:
        - LegacyApiKeyAuth: []
      responses:
        '200':
          description: TODO
      tags: [legacy]
  /tira-admin/delete-task/{taskId}:
    post:
      servers:
        - url: https://www.tira.io
      summary: Deprecated, use a DELETE to `/v1/tasks/{taskId}` instead
      description: TODO
      deprecated: true
      security:
        - LegacyApiKeyAuth: []
      responses:
        '200':
          description: TODO
      tags: [legacy]
  /tira-admin/add-dataset/{taskId}:
    post:
      servers:
        - url: https://www.tira.io
      summary: Deprecated, use a POST to `/v1/datasets` instead
      description: TODO
      deprecated: true
      security:
        - LegacyApiKeyAuth: []
      responses:
        '200':
          description: TODO
      tags: [legacy]
  /tira-admin/upload-dataset/{taskId}/{datasetId}/{datasetType}:
    post:
      servers:
        - url: https://www.tira.io
      description: TODO
      security:
        - LegacyApiKeyAuth: []
      responses:
        '200':
          description: TODO
      tags: [legacy]
  /tira-admin/imports-irds-dataset/{taskId}:
    post:
      servers:
        - url: https://www.tira.io
      description: TODO
      security:
        - LegacyApiKeyAuth: []
      responses:
        '200':
          description: TODO
      tags: [legacy]
  /tira-admin/edit-dataset/{datasetId}:
    post:
      servers:
        - url: https://www.tira.io
      summary: Deprecated, use a PATCH to `/v1/datasets/{datasetId}` instead
      description: TODO
      deprecated: true
      security:
        - LegacyApiKeyAuth: []
      responses:
        '200':
          description: TODO
      tags: [legacy]
  /tira-admin/delete-dataset/{datasetId}:
    post:
      servers:
        - url: https://www.tira.io
      summary: Deprecated, use a DELETE to `/v1/datasets/{datasetId}` instead
      description: TODO
      deprecated: true
      security:
        - LegacyApiKeyAuth: []
      responses:
        '200':
          description: TODO
      tags: [legacy]
  /tira-admin/add-organizer/{organizerId}:
    post:
      servers:
        - url: https://www.tira.io
      summary: Deprecated, use a POST to `/v1/organizers` instead
      description: TODO
      deprecated: true
      security:
        - LegacyApiKeyAuth: []
      responses:
        '200':
          description: TODO
      tags: [legacy]
  /tira-admin/edit-organizer/{organizerId}:
    post:
      servers:
        - url: https://www.tira.io
      summary: Deprecated, use a PATCH to `/v1/organizers/{organizerId}` instead
      description: TODO
      deprecated: true
      security:
        - LegacyApiKeyAuth: []
      responses:
        '200':
          description: TODO
      tags: [legacy]
  /tira-admin/edit-review/{datasetId}/{vmId}/{runId}:
    post:
      servers:
        - url: https://www.tira.io
      description: TODO
      security:
        - LegacyApiKeyAuth: []
      responses:
        '200':
          description: TODO
      tags: [legacy]
  /tira-admin/create-group/{vmId}:
    post:
      servers:
        - url: https://www.tira.io
      description: TODO
      security:
        - LegacyApiKeyAuth: []
      responses:
        '200':
          description: TODO
      tags: [legacy, dead?]

  /publish/{vmId}/{datasetId}/{runId}/{value}:
    get:
      servers:
        - url: https://www.tira.io
      description: TODO
      security:
        - LegacyApiKeyAuth: []
      responses:
        '200':
          description: TODO
      tags: [legacy]
  /blind/{vmId}/{datasetId}/{runId}/{value}:
    get:
      servers:
        - url: https://www.tira.io
      description: TODO
      security:
        - LegacyApiKeyAuth: []
      responses:
        '200':
          description: TODO
      tags: [legacy]

  /evaluations/{taskId}/{datasetId}:
    get:
      summary: |
        Deprecated, use /v1/evaluations instead with `filter[taskId]={taskId}` and `filter[datasetId]={datasetId}` or
        use /v1/tasks/{taskId}/evaluations with `filter[datasetId]={datasetId}`.
      description: |
        Return all evaluation results for all submission to a dataset The frontend calls this to build the leaderboard
        in the task page when a task is selected from the dropdown.
      deprecated: true
      security:
        - LegacyApiKeyAuth: []
      responses:
        '200':
          description: TODO
      tags: [legacy]
  /evaluations-of-vm/{taskId}/{vmId}:
    get:
      summary: |
        Deprecated, use /v1/evaluations instead with `filter[taskId]={taskId}` and `filter[vmId]={vmId}` or use
        /v1/tasks/{taskId}/evaluations with `filter[vmId]={vmId}`.
      deprecated: true
      security:
        - LegacyApiKeyAuth: []
      responses:
        '200':
          description: TODO
      tags: [legacy]
  /evaluation/{vmId}/{runId}:
    get:
      summary: |
        Deprecated, use /v1/evaluations instead with `filter[runId]={runId}` and `filter[vmId]={vmId}`.
      deprecated: true
      security:
        - LegacyApiKeyAuth: []
      responses:
        '200':
          description: TODO
      tags: [legacy, dead?]
  /submissions/{taskId}/{datasetId}:
    get:
      summary: Deprecated, use `/v1/tasks/{taskId}/submissions?filter[datasetId]={datasetId}` instead.
      deprecated: true
      security:
        - LegacyApiKeyAuth: []
      responses:
        '200':
          description: TODO
      tags: [legacy]
  /docker-softwares-details/{vmId}/{dockerSoftwareId}:
    get:
      parameters:
        - name: vmId
          in: header
          description: The identifier of the VM for which to fetch docker details
          required: true
          schema:
            type: string
        - name: dockerSoftwareId
          in: header
          description: The identifier of the software for which to fetch details
          required: true
          schema:
            type: integer
      security:
        - LegacyApiKeyAuth: []
      responses:
        '200':
          description: TODO
      tags: [legacy]
  /upload-group-details/{taskId}/{vmId}/{uploadId}:
    post:
      security:
        - LegacyApiKeyAuth: []
      responses:
        '200':
          description: TODO
      tags: [legacy]
  /evaluations_of_run/{vmId}/{runId}:
    get:
      summary: |
        Deprecated, use /v1/evaluations instead with `filter[runId]={runId}` and `filter[vmId]={vmId}`.
      deprecated: true
      security:
        - LegacyApiKeyAuth: []
      responses:
        '200':
          description: TODO
      tags: [legacy]
  /configuration-of-evaluation/{taskId}/{datasetId}:
    get:
      security:
        - LegacyApiKeyAuth: []
      responses:
        '200':
          description: TODO
      tags: [legacy]
  /list-runs/{taskId}/{datasetId}/{vmId}/{softwareId}:
    get:
      security:
        - LegacyApiKeyAuth: []
      responses:
        '200':
          description: TODO
      tags: [legacy]
  /ova-list:  # TODO: I believe, this can be removed without replacement
    get:
      summary: NO LONGER IN USE?
      deprecated: true
      security:
        - LegacyApiKeyAuth: []
      responses:
        '200':
          description: TODO
      tags: [legacy, dead?]
  /host-list:
    get:
      summary: Deprecated, use /v1/hosts instead.
      deprecated: true
      security:
        - LegacyApiKeyAuth: []
      responses:
        '200':
          description: TODO
      tags: [legacy]
  /organizer-list:
    get:
      summary: Deprecated, use /v1/organizers instead.
      deprecated: true
      security:
        - LegacyApiKeyAuth: []
      responses:
        '200':
          description: TODO
      tags: [legacy]
  /task-list:
    get:
      summary: Deprecated, use /v1/tasks instead.
      deprecated: true
      security:
        - LegacyApiKeyAuth: []
      responses:
        '200':
          description: TODO
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                  context:
                    type: object
                    properties:
                      include_navigation:
                        type: boolean
                      user_id:
                        type: string
                        nullable: true
                      role:
                        type: string
                        enum:
                          - "guest"
                      organizer_teams:
                        type: string  # TODO: this is really odd that it is a string and not a list
                      task_list:
                        type: array
                        items:
                          $ref: "#/components/schemas/TaskLegacy"
      tags: [legacy]
  /task/{taskId}:
    get:
      parameters:
        - name: taskId
          in: path
          description: The identifier of the task for which to fetch information
          required: true
          schema:
            type: string
      summary: Deprecated, use /v1/tasks/{taskId} instead.
      deprecated: true
      security:
        - LegacyApiKeyAuth: []
      responses:
        '200':
          description: TODO
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                  context:
                    type: object
                    properties:
                      include_navigation:
                        type: boolean
                      user_id:
                        type: string
                        nullable: true
                      role:
                        type: string
                        enum:
                          - "guest"
                      organizer_teams:
                        type: string  # TODO: this is really odd that it is a string and not a list
                      task:
                        $ref: "#/components/schemas/TaskLegacy"
        '404':
           $ref: "#/components/responses/UnauthorizedOrNotFoundError"
      tags: [legacy]
  /registration_formular/{taskId}:
    get:
      security:
        - LegacyApiKeyAuth: []
      responses:
        '200':
          description: TODO
      tags: [legacy]
  /dataset/{datasetId}:
    get:
      summary: Deprecated, use `/v1/datasets/{datasetId}` instead.
      deprecated: true
      security:
        - LegacyApiKeyAuth: []
      responses:
        '200':
          description: TODO
      tags: [legacy]
  /datasets_by_task/{taskId}:
    get:
      summary: Deprecated, use `/v1/datasets?filter[taskId]={taskId}` instead.
      deprecated: true
      security:
        - LegacyApiKeyAuth: []
      responses:
        '200':
          description: TODO
      tags: [legacy]
  /organizer/{organizerId}:
    get:
      summary: Deprecated, use `/v1/organizers/{organizerId}` instead.
      deprecated: true
      parameters:
        - name: organizerId
          in: path
          description: The identifier of the organizer for which to fetch information
          required: true
          schema:
            type: string
      security:
        - LegacyApiKeyAuth: []
      responses:
        '200':
          description: TODO
      tags: [legacy]
  /role:
    get:
      summary: Deprecated, use /v1/user instead.
      deprecated: true
      security:
        - LegacyApiKeyAuth: []
      responses:
        '200':
          description: TODO
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
      tags: [legacy]
  /task/{taskId}/user/{userId}:
    get:
      security:
        - LegacyApiKeyAuth: []
      responses:
        '200':
          description: TODO
        '404':
           $ref: "#/components/responses/UnauthorizedOrNotFoundError"
      tags: [legacy]
  /task/{taskId}/user/{userId}/refresh-docker-images:
    get:
      security:
        - LegacyApiKeyAuth: []
      responses:
        '200':
          description: TODO
        '404':
           $ref: "#/components/responses/UnauthorizedOrNotFoundError"
      tags: [legacy]
  /count-of-missing-reviews/{taskId}:
    get:
      security:
        - LegacyApiKeyAuth: []
      responses:
        '200':
          description: TODO
      tags: [legacy]
  /task/{taskId}/user/{userId}/software/running/{forceCacheRefresh}:
    get:
      security:
        - LegacyApiKeyAuth: []
      responses:
        '200':
          description: TODO
        '404':
           $ref: "#/components/responses/UnauthorizedOrNotFoundError"
      tags: [legacy]
  /task/{taskId}/public-submissions:
    get:
      security:
        - LegacyApiKeyAuth: []
      responses:
        '200':
          description: TODO
        '404':
           $ref: "#/components/responses/UnauthorizedOrNotFoundError"
      tags: [legacy]
  /task/{taskId}/submission-details/{userId}/{software}:
    get:
      security:
        - LegacyApiKeyAuth: []
      responses:
        '200':
          description: TODO
        '404':
           $ref: "#/components/responses/UnauthorizedOrNotFoundError"
      tags: [legacy]
  /review/{datasetId}/{vmId}/{runId}:
    get:
      security:
        - LegacyApiKeyAuth: []
      responses:
        '200':
          description: TODO
        '404':
           $ref: "#/components/responses/UnauthorizedOrNotFoundError"
      tags: [legacy]
  /registration/add_registration/{vmId}/{taskId}:
    post:
      parameters:
        - name: vmId
          in: path
          description: The identifier of the VM for which to add a registration
          required: true
          schema:
            type: string
        - name: taskId
          in: path
          description: The identifier of the task for which to add a registration
          required: true
          schema:
            type: string
      security:
        - LegacyApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - group
              properties:
                group:
                  type: string
                team:
                  type: string
                username:
                  type: string
                email:
                  type: string
                affiliation:
                  type: string
                country:
                  type: string
                employment:
                  type: string
                participation:
                  type: string
                instructorName:
                  type: string
                instructorEmail:
                  type: string
                questions:
                  type: string
      responses:
        '200':
          description: TODO
      tags: [legacy]
  /submissions-for-task/{taskId}/{userId}/{submissionType}:
    get:
      summary: |
        Deprecated, use `/v1/tasks/{taskId}/submissions?filter[userId]={userId}&filter[type]={submissionType}` instead.
      deprecated: true
      parameters:
        - name: taskId
          in: path
          description: The identifier of the task for which to upload a submission
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: The identifier of the user for which to upload a submission
          required: true
          schema:
            type: string
        - name: submissionType
          in: path
          description: The type of submission to upload
          required: true
          schema:
            type: string
            enum:
              - upload
              - docker
              # - vm    # deprecated and will be answered with a standard error response
      security:
        - LegacyApiKeyAuth: []
      responses:
        '200':
          description: TODO
      tags: [legacy]
  /tirex-components:
    get:
      security:
        - LegacyApiKeyAuth: []
      responses:
        '200':
          description: TODO
      tags: [legacy]
  /tirex-snippet:
    get:
      security:
        - LegacyApiKeyAuth: []
      responses:
        '200':
          description: TODO
      tags: [legacy]
  /snippet-for-tirex-components:
    get:
      security:
        - LegacyApiKeyAuth: []
      responses:
        '200':
          description: TODO
      tags: [legacy]
  /re-ranking-datasets/{taskId}:
    get:
      security:
        - LegacyApiKeyAuth: []
      responses:
        '200':
          description: TODO
      tags: [legacy]
  /submissions-of-user/{vmId}:
    get:
      security:
        - LegacyApiKeyAuth: []
      responses:
        '200':
          description: TODO
      tags: [legacy]
  /add_software_submission_git_repository/{taskId}/{vmId}:
    get:
      security:
        - LegacyApiKeyAuth: []
      responses:
        '200':
          description: TODO
      tags: [legacy]
  /get_software_submission_git_repository/{taskId}/{vmId}:
    get:
      security:
        - LegacyApiKeyAuth: []
      responses:
        '200':
          description: TODO
      tags: [legacy]
  /import-submissions/{taskId}/{vmId}/{submissionType}/{sId}:
    get:
      security:
        - LegacyApiKeyAuth: []
      responses:
        '200':
          description: TODO
      tags: [legacy]
  /diffir/{taskId}/{topk}/{runId1}/{runId2}:
    get:
      security:
        - LegacyApiKeyAuth: []
      responses:
        '200':
          description: TODO
      tags: [legacy]
  /serp/{taskId}/user/{vmId}/dataset/{datasetId}/{topk}/{runId}:  # TODO: is this one still in use?
    get:
      security:
        - LegacyApiKeyAuth: []
      responses:
        '200':
          description: TODO
      tags: [legacy]

  # V1 API
  /health:
    get:
      security: []
      responses:
        '200':
          description: TODO
      tags: [v1]
  /v1/datasets:
    get:
      summary: Returns a (optionally filtered) list of all datasets
      parameters:
        - name: filter  # https://jsonapi.org/recommendations/#filtering
          in: query
          style: deepObject
          schema:
            type: object
            properties:
              taskId:
                type: string
      responses:
        '200':
          description: TODO
        '401':
           $ref: "#/components/responses/UnauthorizedError"
      tags: [v1]
    post:
      summary: Creates a new dataset and returns it
      responses:
        '201':
          description: TODO
        '401':
           $ref: "#/components/responses/UnauthorizedError"
      tags: [v1]
  /v1/datasets/{datasetId}:
    get:
      summary: Returns information on the specified dataset
      parameters:
        - name: datasetId
          in: path
          description: The identifier of the requested dataset
          required: true
          schema:
            type: string
      responses:
        '200':
          description: TODO
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '401':
           $ref: "#/components/responses/UnauthorizedError"
        '404':
           $ref: "#/components/responses/UnauthorizedOrNotFoundError"
      tags: [v1]
    patch:
      summary: Updates the specified dataset
      parameters:
        - name: datasetId
          in: path
          description: The identifier of the dataset to be updated
          required: true
          schema:
            type: string
      responses:
        '204':
          description: TODO
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '401':
           $ref: "#/components/responses/UnauthorizedError"
        '404':
           $ref: "#/components/responses/UnauthorizedOrNotFoundError"
      tags: [v1]
    delete:
      summary: Deletes the specified dataset
      parameters:
        - name: datasetId
          in: path
          description: The identifier of the dataset to be deleted
          required: true
          schema:
            type: string
      responses:
        '204':
          description: TODO
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '401':
           $ref: "#/components/responses/UnauthorizedError"
        '404':
           $ref: "#/components/responses/UnauthorizedOrNotFoundError"
      tags: [v1]
  /v1/evaluations:
    get:
      parameters:
        - name: filter  # https://jsonapi.org/recommendations/#filtering
          in: query
          style: deepObject
          schema:
            type: object
            properties:
              datasetId:
                type: string
              runId:
                type: string
              taskId:
                type: string
              vmId:
                type: string
      responses:
        '200':
          description: TODO
        '401':
           $ref: "#/components/responses/UnauthorizedError"
      tags: [v1]
  /v1/hosts:
    get:
      responses:
        '200':
          description: TODO
        '401':
           $ref: "#/components/responses/UnauthorizedError"
      tags: [v1]
  /v1/organizers:
    get:
      summary: Returns a (optionally filtered) list of all organizers
      responses:
        '201':
          description: TODO
        '401':
           $ref: "#/components/responses/UnauthorizedError"
      tags: [v1]
    post:
      summary: Creates a new organizer and returns it
      responses:
        
        '200':
          description: TODO
        '401':
           $ref: "#/components/responses/UnauthorizedError"
      tags: [v1]
  /v1/organizers/{organizerId}:
    get:
      summary: Returns the specified organizer
      parameters:
        - name: organizerId
          in: path
          description: The identifier of the organizer for which to fetch infromation
          required: true
          schema:
            type: string
      responses:
        '204':
          description: TODO
        '401':
           $ref: "#/components/responses/UnauthorizedError"
        '404':
           $ref: "#/components/responses/UnauthorizedOrNotFoundError"
      tags: [v1]
    patch:
      summary: Updates the specified organizer
      parameters:
        - name: organizerId
          in: path
          description: The identifier of the organizer to update
          required: true
          schema:
            type: string
      responses:
        '204':
          description: TODO
        '401':
           $ref: "#/components/responses/UnauthorizedError"
      tags: [v1]
    delete:
      summary: Deletes the specified organizer
      parameters:
        - name: organizerId
          in: path
          description: The identifier of the organizer to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: TODO
        '401':
           $ref: "#/components/responses/UnauthorizedError"
      tags: [v1]
  /v1/runs:
    get:
      responses:
        '200':
          description: TODO
        '401':
           $ref: "#/components/responses/UnauthorizedError"
      tags: [v1]
  /v1/runs/{runId}:
    get:
      parameters:
        - name: runId
          in: path
          description: The identifier of the run for which to fetch information
          required: true
          schema:
            type: string
        - name: filter  # https://jsonapi.org/recommendations/#filtering
          in: query
          style: deepObject
          schema:
            type: object
            properties:
              dataset:
                type: string
              taskId:
                type: string
              vmId:
                type: string
        - name: topk
          in: query
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: TODO
        '401':
           $ref: "#/components/responses/UnauthorizedError"
        '404':
           $ref: "#/components/responses/UnauthorizedOrNotFoundError"
      tags: [v1]
  /v1/tasks:
    get:
      responses:
        '200':
          description: TODO
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        '401':
           $ref: "#/components/responses/UnauthorizedError"
      tags: [v1]
    post:
      responses:
        '201':
          description: TODO
        '401':
           $ref: "#/components/responses/UnauthorizedError"
      tags: [v1]
  /v1/tasks/{taskId}:
    get:
      parameters:
        - name: taskId
          in: path
          description: The identifier of the requested task
          required: true
          schema:
            type: string
      responses:
        '200':
          description: TODO
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '401':
           $ref: "#/components/responses/UnauthorizedError"
        '404':
           $ref: "#/components/responses/UnauthorizedOrNotFoundError"
      tags: [v1]
    delete:
      parameters:
        - name: taskId
          in: path
          description: The identifier of the requested task
          required: true
          schema:
            type: string
      responses:
        '204':
          description: TODO
        '401':
           $ref: "#/components/responses/UnauthorizedError"
        '404':
           $ref: "#/components/responses/UnauthorizedOrNotFoundError"
      tags: [v1]
  /v1/tasks/{taskId}/evaluations:
    get:
      parameters:
        - name: taskId
          in: path
          description: The identifier of the task for which to fetch evaluations
          required: true
          schema:
            type: string
        - name: filter
          in: query
          style: deepObject
          schema:
            type: object
            properties:
              vmId:
                type: string
              datasetId:
                type: string
              runId:
                type: string
      responses:
        '200':
          description: TODO
        '401':
           $ref: "#/components/responses/UnauthorizedError"
        '404':
           $ref: "#/components/responses/UnauthorizedOrNotFoundError"
      tags: [v1]
  /v1/tasks/{taskId}/registrations:
    get:
      summary: Returns a list of all users registered for the task referenced by `taskId`
      parameters:
        - name: taskId
          in: path
          description: The identifier of the task for which to fetch evaluations
          required: true
          schema:
            type: string
      responses:
        '200':
          description: TODO
          content:
            text/csv: {}
        '401':
           $ref: "#/components/responses/UnauthorizedError"
        '404':
           $ref: "#/components/responses/UnauthorizedOrNotFoundError"
      tags: [v1]
    post:
      summary: Registers a new user for the task referenced by `taskId`
      parameters:
        - name: taskId
          in: path
          description: The identifier of the task for which to fetch evaluations
          required: true
          schema:
            type: string
      responses:
        '201':
          description: The registrations was created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  uri:
                    type: string
                    format: uri
                    description: The location the newly created registration is located at
                  registration:
                    type: object
                    description: |
                      The newly created registration object. This should be identical to the one returned from the URI
                      field.
        '401':
           $ref: "#/components/responses/UnauthorizedError"
        '404':
           $ref: "#/components/responses/UnauthorizedOrNotFoundError"
      tags: [v1]
  /v1/tasks/{taskId}/submissions:
    get:
      parameters:
        - name: taskId
          in: path
          description: The identifier of the requested task
          required: true
          schema:
            type: string
        - name: filter
          in: query
          style: deepObject
          schema:
            type: object
            properties:
              datasetId:
                type: string
              userId:
                type: string
              type:
                type: string
                enum:
                  - upload
                  - docker
      responses:
        '200':
          description: TODO
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '401':
           $ref: "#/components/responses/UnauthorizedError"
        '404':
           $ref: "#/components/responses/UnauthorizedOrNotFoundError"
      tags: [v1]
  /v1/tirex:
    get:
      responses:
        '200':
          description: TODO
        '401':
           $ref: "#/components/responses/UnauthorizedError"
      tags: [v1]
  /v1/user:
    get:
      summary: The user associated with the authenticated state
      responses:
        '200':
          description: TODO
        '401':
           $ref: "#/components/responses/UnauthorizedError"
      tags: [v1]

components:
  securitySchemes:
    # Legacy
    LegacyApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY
    # V1
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    # https://www.rfc-editor.org/rfc/rfc9457
    ProblemJSON:
      type: object
      description: |
        The problem+json object contains all the necessary information to create helpful user-facing error messages.
        Further fields can be appended to provide additional information to the consumer (e.g. arguments with which the
        problem was triggered).
      properties:
        type:
          type: string
          format: uri
          default: "about:blank"
        status:
          type: number
        title:
          type: string
          description: |
            Short, human-readable description of the problem. Should only be used, e.g., for logging. The "type"-URI
            should be preferred to display a (potentially localized) description in user-facing error messages.
        detail:
          type: string
          description: |
            Human-readable explanation of the specific problem. Should help the user fix the problem rather than provide
            debugging information. This should not be parsed by consumers of the REST-API (e.g., to display a localized
            error message). Instead, additional fields should be added to the problem+json.
        instance:
          type: string
          format: uri
          description: The specific URI at which the problem occured. Should contain absolute paths.
        errors:
          description: |
            If multiple errors occured with the same status-code, they can be reported together as members of the
            errors-array.
          type: array
          items:
            type: object
            properties:
              detail:
                type: string
    Role:
      type: object
      properties:
        status:
          type: integer
        role:
          type: string
          enum: [guest]
        organizer_teams:
          type: array
          items:
            type: string
    TaskLegacy:  # Field names don't follow the naming guidelines (they are snake_case instead of camelCase)
      type: object
      properties:
        task_id:
          type: string
        task_name:
          type: string
        task_description:
          type: string
        organizer:
          type: string
        organizer_id:
          type: string
        web:
          type: string
          format: uri
        year:
          type: string
          pattern: '^\d{4}(?:-\d{4})?$'  # YEAR or YEAR-YEAR
        featured:
          type: boolean
        require_registration:
          type: boolean
        require_groups:
          type: boolean
        restrict_groups:
          type: boolean
        allowed_task_teams:
          type: string
          default: ""
        master_vm_id:
          type: string
        is_ir_task:
          type: boolean
        irds_re_ranking_image:  # TODO: is this only necessary for ir_tasks? Consider polymorphism
          type: string
        irds_re_ranking_command:  # TODO: is this only necessary for ir_tasks? Consider polymorphism
          type: string
        irds_re_ranking_resource:  # TODO: is this only necessary for ir_tasks? Consider polymorphism
          type: string
        dataset_count:
          type: integer
        software_count:
          type: integer
        max_stmax_std_out_chars_on_test_data:
          type: integer
        max_std_err_chars_on_test_data:
          type: integer
        max_file_list_chars_on_test_data:
          type: integer
        command_placeholder:
          type: string
        command_description:
          type: string
        dataset_label:
          type: string
        max_std_out_chars_on_test_data_eval:
          type: integer
        max_std_err_chars_on_test_data_eval:
          type: integer
        max_file_list_chars_on_test_data_eval:
          type: integer
    Task:  # Updated version of TaskLegacy. Not yet done. TODO: complete
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        organizer:
          $ref: "#/components/schemas/Organizer"
        website:
          type: string
          format: uri
        year:
          type: string
          pattern: '^\d{4}(?:-\d{4})?$'  # YEAR or YEAR-YEAR
      oneOf:
        - $ref: "#/components/schemas/BaseTask"
        - $ref: "#/components/schemas/IRTask"
      discriminator:
        propertyName: type
        mapping:
          basetask: "#/components/schemas/BaseTask"
          irtask: "#/components/schemas/IRTask"
    BaseTask:
      type: object
      required:
        - type
      properties:
        type:
          type: string
    IRTask:
      type: object
      required:
        - type
      properties:
        type:
          type: string
    Organizer:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
  responses:
    UnauthorizedError: # https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.2
      description: |
        API Key is missing or invalid.
      headers:
        WWW_Authenticate:
          schema:
            type: string
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ProblemJSON'
              - type: object
                properties:
                  title:
                    default: "Unauthorized"
                  status:
                    default: 401
    UnauthorizedOrNotFoundError:  # https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.2
      description: |
        The resource was not found or the service does not want to disclose if the resource exists but the user does not
        have access to it. As per W3C this should be a 404 but can fulfill the purpose of a 403 internally.
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ProblemJSON'
              - type: object
                properties:
                  title:
                    default: "Not Found"
                  status:
                    default: 404
    ForbiddenError:  # https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.4
      description: The service refuses to fulfill the request. Authorization would not help.
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ProblemJSON'
              - type: object
                properties:
                  title:
                    default: "Forbidden"
                  status:
                    default: 403

tags:
  - name: legacy
    description: The pre 1.0 REST API. It may not adhere to our REST API guidelines and will be removed in the future.
  - name: v1
    description: The REST API for the TIRA 1.0 release