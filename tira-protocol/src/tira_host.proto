syntax = "proto3";
// -----------------------------------------------------------------------------
// Compilation
// -----------------------------------------------------------------------------

// Install the Google Protobuf protoc compiler:
//   Web: http://code.google.com/p/protobuf/
//   Apt: Search your repository for 'protobuf-compiler'
//
// Compile the schema file to generate source code:
//   C++ : $ protoc --cpp_out=path/to/generated/code  tira_host.proto
//   Java: $ protoc --java_out=path/to/generated/code tira_host.proto
//   Java gRPC: $ protoc --plugin=protoc-gen-grpc-java=build/exe/java_plugin/protoc-gen-grpc-java --grpc-java_out=. --proto_path=. tira_host.proto
//     See https://github.com/grpc/grpc-java/tree/master/compiler
//
// Python:
//   Install gRPC for Python: https://grpc.io/docs/languages/python/quickstart/
//   $ python -m grpc_tools.protoc -I=. --python_out=. --grpc_python_out=. ./tira_host.proto

// -----------------------------------------------------------------------------
// Options
// -----------------------------------------------------------------------------

package tira.generated;

import "google/protobuf/empty.proto";
// import "tira_messages.proto";

// Becomes the package name of the generated Java code
option java_package = "de.webis.tira.client.web.generated";

// option java_multiple_files = true;
option java_outer_classname = "TiraHostMessages";
// option objc_class_prefix = "THM";

// Other options
option optimize_for = SPEED;

// -----------------------------------------------------------------------------
// Definitions
// -----------------------------------------------------------------------------

// The service definition.
service TiraHostService {
  rpc vm_backup (VmId) returns (Transaction) {}
  rpc vm_create (VmCreate) returns (Transaction) {}
  rpc vm_delete (VmId) returns (Transaction) {}
  rpc vm_info (VmId) returns (VmInfo) {}
  rpc vm_list (Transaction) returns (VmList) {}
  rpc vm_metrics (VmId) returns (Transaction) {}
  rpc vm_sandbox (VmId) returns (Transaction) {}
  rpc vm_shutdown (VmId) returns (Transaction) {}
  rpc vm_snapshot (VmId) returns (Transaction) {}
  rpc vm_start (VmId) returns (Transaction) {}
  rpc vm_stop (VmId) returns (Transaction) {}
  rpc vm_unsandbox (VmId) returns (Transaction) {}
  rpc run_execute(RunDetails) returns (Transaction) {}
  rpc run_abort(VmId) returns (Transaction) {}
  rpc run_eval(RunDetails) returns (Transaction) {}
  rpc alive (Transaction) returns (Transaction) {}
}

service TiraApplicationService {
  rpc set_state (VmState) returns (Transaction) {}
  rpc confirm_vm_create (VmDetails) returns (Transaction) {}
  rpc confirm_vm_delete (VmId) returns (Transaction) {}
  rpc confirm_run_eval (EvaluationResults) returns (Transaction) {}
  rpc confirm_run_execute (ExecutionResults) returns (Transaction) {} // TODO transmit the results of the run that should be displayed on the website (i.e. runDir without output)
  rpc complete_transaction (Transaction) returns (Transaction) {}
}

enum Status {
  SUCCESS = 0;
  FAILED = 1;               // When a request failed for unknown reasons or reasons other than the ones below.
  NO_VM = 2;                // When the request can not be served because the VM can not be found at all.
  VM_IN_WRONG_STATE = 3;    // When the request can not be served because the VM is in a state where a requested transition is impossible.
  VM_IN_ARCHIVE =4;         // When the request can not be served because the VM is archived.
  VM_NOT_ACCESSIBLE = 5;    // When the VM is inaccessible for other reasons (froze, ssh down, wont boot)
  NO_RUN = 6;               // When the run does not exist
  RUN_MALFORMED = 7;        // When the run exists, the evaluation failed, and it's the runs fault.
  INPUT_MALFORMED = 8;      // When the
  HOST_BUSY = 9;            // When the host does not want to accept a request for external reasons.
}

enum State {
    UNDEFINED = 0;
    RUNNING = 1;
    POWERED_OFF = 2;
    POWERING_ON = 3;
    POWERING_OFF = 4;
    SANDBOXING = 5;
    UNSANDBOXING = 6;
    EXECUTING = 7;
    ARCHIVED = 8;
}

message Transaction {
  Status status = 1;
  string transactionId = 2;
  string message = 3;
}

message VmId {
  Transaction transaction = 1;
  string vmId = 2;
}

message VmCreate {
  Transaction transaction = 1;
  string vmId = 2; // This is the "name" of the vm
  string userName = 3;  // This is the "name" of the main user of the vm
  string ovaFile = 4;
  string ip = 5;
  string host = 6;
}

message VmDetails {
  Transaction transaction = 1;
  string vmId = 2;
  string userName = 3;
  string initialUserPw = 4;  // see this as initial password. Hosts may refuse to include this here.
  string ip = 5;
  string host = 6;
  string sshPort = 7;
  string rdpPort = 8;
}

message VmList {
  Transaction transaction = 1;
  repeated VmDetails vmDetails = 2;
}

message RunId {
  Transaction transaction = 1;
  string vmId = 2;
  string datasetId = 3;
  string runId = 4;
}

message RunDetails {
  Transaction transaction = 1;
  RunId runId = 2;
  RunId inputRunId = 3;
  string optionalParameters = 4;
  string taskId = 5;
  string softwareId = 6;
}

message EvaluationResults {
  message Measure {
    string key   = 1;
    string value = 2;
  }
  Transaction transaction = 1;
  RunId runId = 2;
  repeated Measure measures = 3;
}

message ExecutionResults {
  Transaction transaction = 1;
  RunId runId = 2;
}

message VmState {
  Transaction transaction = 1;
  State state = 2;
  string vmId = 3;
}

message VmInfo {
  Transaction transaction = 1;
  string guestOs = 3;
  string memorySize = 4;
  string numberOfCpus = 5;
  string sshPort = 6;
  string rdpPort = 7;
  string host = 8;
  bool sshPortStatus = 9;
  bool rdpPortStatus = 10;
  State state = 11;
}
